{"version":3,"sources":["components/AccountBalance.js","components/Home.js","components/UserProfile.js","components/Login.js","components/debit/DebitCard.js","components/debit/Debits.js","components/credit/CreditCard.js","components/credit/Credits.js","App.js","serviceWorker.js","index.js"],"names":["AccountBalance","this","props","accountBalance","toLocaleString","style","currency","Component","Home","src","alt","to","UserProfile","userName","memberSince","Login","handleChange","e","updatedUser","state","user","inputField","target","name","inputValue","value","setState","handleSubmit","preventDefault","mockLogin","redirect","password","onSubmit","htmlFor","type","onChange","DebitCard","className","description","amount","date","Debits","addDebitHandler","bind","placeholder","required","min","step","generateDebitCards","data","cards","forEach","element","index","id","push","key","toString","CreditCard","Credits","addCreditHandler","generateCreditCards","App","loginInfo","newUser","currentUser","handleAddDebit","event","debitDescription","debitAmount","Date","toISOString","newDebit","uuidv5","Number","newDebitData","Array","debitData","totalDebit","calculateTotalAmount","reset","handleAddCredit","newCredit","newCreditData","creditData","totalCredit","fetchDebitData","fetchCreditData","axios","get","then","response","catch","error","console","log","reduce","sum","current","exact","path","component","render","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.b3c84911.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\n/**\r\n * This component displays the user's account balance\r\n */\r\nexport default class AccountBalance extends Component\r\n{\r\n    render()\r\n    {\r\n        return (\r\n            <div>\r\n                Balance: {this.props.accountBalance.toLocaleString(\"en-US\", { style: \"currency\", currency: \"USD\" })}\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport AccountBalance from './AccountBalance';\r\n\r\n/**\r\n * This component will be the homepage of the app, which will show the app's logo and name, along with\r\n * a login button that redirects users to the Login page\r\n */\r\nexport default class Home extends Component\r\n{\r\n    render()\r\n    {\r\n        return (\r\n            <div>\r\n                <img src=\"https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/160/apple/118/bank_1f3e6.png\" alt=\"bank\"/>\r\n                <h1>Bank of React</h1>\r\n\r\n                <Link to=\"/debits\">Debits</Link><br/>\r\n                <Link to=\"/credits\">Credits</Link>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, {Component} from 'react';\r\n\r\nimport { Link } from 'react-router-dom';\r\n\r\n/**\r\n * This component is where the user's profile is displayed, with information such as \r\n * user name and date since membership \r\n */\r\nexport default class UserProfile extends Component\r\n{\r\n    render()\r\n    {\r\n        return (\r\n            <div>\r\n                <h1>User Profile</h1>\r\n\r\n                <div>UserName: {this.props.userName}</div>\r\n                <div>Member Since: {this.props.memberSince}</div>\r\n\r\n                <Link to=\"/\">Home</Link>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\n\r\nimport { Redirect } from 'react-router-dom';\r\n\r\n/**\r\n * This component will allow the user to login to their account.\r\n * Upon successful login, they will be redirected to the UserProfile page.\r\n * \r\n * For the sake of this example app, no real user accounts will be used, just a mockup function.\r\n */\r\nexport default class Login extends Component\r\n{\r\n    constructor()\r\n    {\r\n        super();\r\n        this.state =\r\n        {\r\n            user:\r\n            {\r\n                userName: \"\",\r\n                password: \"\",\r\n            },\r\n            redirect: false\r\n        }\r\n    }\r\n\r\n    handleChange = (e) =>\r\n    {\r\n        const updatedUser = {...this.state.user};\r\n        const inputField = e.target.name;\r\n        const inputValue = e.target.value;\r\n        updatedUser[inputField] = inputValue;\r\n\r\n        this.setState({ user: updatedUser });\r\n    }\r\n\r\n    handleSubmit = (e) =>\r\n    {\r\n        e.preventDefault();\r\n        this.props.mockLogin(this.state.user);\r\n        this.setState({ redirect: true });\r\n    }\r\n\r\n    render()\r\n    {\r\n        if(this.state.redirect) return (<Redirect to=\"/userProfile\" />);\r\n\r\n        return (\r\n            <div>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <div>\r\n                        <label htmlFor=\"userName\">User Name</label>\r\n                        <input type=\"text\" name=\"userName\" onChange={this.handleChange} value={this.state.user.userName} />\r\n                    </div>\r\n                    <div>\r\n                        <label htmlFor=\"password\">Password</label>\r\n                        <input type=\"password\" name=\"password\" />\r\n                    </div>\r\n                    <button>Log In</button>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\n\r\nexport default class DebitCard extends Component\r\n{\r\n    render()\r\n    {\r\n        return (\r\n            <section className=\"debit-card\">\r\n                <h3 className=\"debit-description\">{this.props.description}</h3>\r\n                <ul className=\"debit-details\">\r\n                    <li>Amount: {this.props.amount.toLocaleString(\"en-US\", { style: \"currency\", currency: \"USD\" })}</li>\r\n                    <li>Date: {this.props.date}</li>\r\n                </ul>\r\n            </section>\r\n        );\r\n    }\r\n}","import React, {Component} from 'react';\r\n\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport AccountBalance from '../AccountBalance';\r\nimport DebitCard from './DebitCard';\r\n\r\nexport default class Debits extends Component\r\n{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.handleSubmit = props.addDebitHandler.bind(this.handleSubmit);\r\n    }\r\n\r\n    render()\r\n    {\r\n        return (\r\n            <div>\r\n                <h1>Debits</h1>\r\n                <Link to=\"/\">Home</Link>\r\n\r\n                <AccountBalance accountBalance={this.props.accountBalance} /><br/>\r\n\r\n                <fieldset>\r\n                    <legend>Add New Debit</legend>\r\n                    <form onSubmit={this.handleSubmit}>\r\n                        <label htmlFor=\"description\">Description: </label>\r\n                        <input type=\"text\" name=\"description\" placeholder=\"Item Name\" required />\r\n                        <br/>\r\n                        <label htmlFor=\"amount\">Amount (in USD): </label>\r\n                        <input type=\"number\" min=\"0\" step=\"0.01\" name=\"amount\" placeholder=\"9.99\" required />\r\n                        <br/>\r\n                        <button type=\"submit\">Submit</button>\r\n                    </form>\r\n                </fieldset>\r\n                \r\n\r\n                <section className=\"debit-card-grid\">\r\n                    {this.generateDebitCards(this.props.data)}\r\n                </section>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    generateDebitCards(data)\r\n    {\r\n        let cards = [];\r\n\r\n        data.forEach((element, index) =>\r\n        {\r\n            const description = element.description;\r\n            const amount = element.amount;\r\n            const id = element.id;\r\n            const date = element.date;\r\n\r\n            cards.push(<DebitCard \r\n                key={index.toString()}\r\n                description={description}\r\n                amount={amount}\r\n                id={id}\r\n                date={date}\r\n            />);\r\n        })\r\n\r\n        return cards;\r\n    }\r\n}","import React, { Component } from 'react';\r\n\r\nexport default class CreditCard extends Component\r\n{\r\n    render()\r\n    {\r\n        return (\r\n            <section className=\"credit-card\">\r\n                <h3 className=\"credit-description\">{this.props.description}</h3>\r\n                <ul className=\"credit-details\">\r\n                    <li>Amount: {this.props.amount.toLocaleString(\"en-US\", { style: \"currency\", currency: \"USD\" })}</li>\r\n                    <li>Date: {this.props.date}</li>\r\n                </ul>\r\n            </section>\r\n        );\r\n    }\r\n}","import React, {Component} from 'react';\r\n\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport AccountBalance from '../AccountBalance';\r\nimport CreditCard from './CreditCard';\r\n\r\nexport default class Credits extends Component\r\n{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.handleSubmit = props.addCreditHandler.bind(this.handleSubmit);\r\n    }\r\n\r\n    render()\r\n    {\r\n        return (\r\n            <div>\r\n                <h1>Credits</h1>\r\n                <Link to=\"/\">Home</Link>\r\n\r\n                <AccountBalance accountBalance={this.props.accountBalance} /><br/>\r\n\r\n                <fieldset>\r\n                    <legend>Add New Credit</legend>\r\n                    <form onSubmit={this.handleSubmit}>\r\n                        <label htmlFor=\"description\">Description: </label>\r\n                        <input type=\"text\" name=\"description\" placeholder=\"Item Name\" required />\r\n                        <br/>\r\n                        <label htmlFor=\"amount\">Amount (in USD): </label>\r\n                        <input type=\"number\" min=\"0\" step=\"0.01\" name=\"amount\" placeholder=\"9.99\" required />\r\n                        <br/>\r\n                        <button type=\"submit\">Submit</button>\r\n                    </form>\r\n                </fieldset>\r\n\r\n                <section className=\"credit-card-grid\">\r\n                    {this.generateCreditCards(this.props.data)}\r\n                </section>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    generateCreditCards(data)\r\n    {\r\n        let cards = [];\r\n\r\n        data.forEach((element, index) =>\r\n        {\r\n            const description = element.description;\r\n            const amount = element.amount;\r\n            const id = element.id;\r\n            const date = element.date;\r\n\r\n            cards.push(<CreditCard \r\n                key={index.toString()}\r\n                description={description}\r\n                amount={amount}\r\n                id={id}\r\n                date={date}\r\n            />);\r\n        })\r\n\r\n        return cards;\r\n    }\r\n}","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport './App.css';\n\nimport axios from 'axios';\nimport { v5 as uuidv5 } from 'uuid';\n\nimport Home from './components/Home';\nimport UserProfile from './components/UserProfile';\nimport Login from './components/Login';\nimport Debits from './components/debit/Debits';\nimport Credits from './components/credit/Credits';\n\n/**\n * This component will manage all the routings between pages\n */\nexport default class App extends Component \n{\n    constructor()\n    {\n        super();\n        this.state =\n        {\n            currentUser:\n            {\n                userName: 'bob_loblaw',\n                memberSince: '08/23/99',\n            },\n            debitData: [],\n            creditData: [],\n            totalDebit: -1,\n            totalCredit: -1\n        }\n    }\n\n    componentDidMount()\n    {\n        this.fetchDebitData();\n        this.fetchCreditData();\n    }\n\n    fetchDebitData()\n    {\n        const debitUrl = \"https://moj-api.herokuapp.com/debits\";\n\n        axios.get(debitUrl)\n        .then((response) =>\n        {\n            const debitData = response.data;\n\n            this.setState({ debitData });\n            this.setState({ totalDebit: this.calculateTotalAmount(debitData) });\n        })\n        .catch((error) =>\n        {\n            console.log(error);\n            this.setState({ debitData: [] });\n        })\n    }\n\n    fetchCreditData()\n    {\n        const creditUrl = \"https://moj-api.herokuapp.com/credits\";\n\n        axios.get(creditUrl)\n        .then((response) =>\n        {\n            const creditData = response.data;\n\n            this.setState({ creditData });\n            this.setState({ totalCredit: this.calculateTotalAmount(creditData) });\n        })\n        .catch((error) =>\n        {\n            console.log(error);\n            this.setState({ creditData: [] });\n        })\n    }\n\n    calculateTotalAmount(data)\n    {\n        return data.reduce((sum, current) =>\n        {\n            sum += current.amount;\n            return sum;\n        }, 0);\n    }\n\n    mockLogin = (loginInfo) =>\n    {\n        const newUser = {...this.state.currentUser};\n        newUser.userName = loginInfo.userName;\n        this.setState({ currentUser: newUser });\n    }\n\n    handleAddDebit = (event) =>\n    {\n        // Prevent browser refresh\n        event.preventDefault();\n\n        const debitDescription = event.target.description.value;\n        const debitAmount = event.target.amount.value;\n        const date = new Date().toISOString();\n        const id = uuidv5(date, 'addcd184-a939-11ea-a852-0f0463844a38');\n\n        let newDebit = \n        {\n            id: id,\n            description: debitDescription,\n            amount: Number(debitAmount),\n            date: date\n        }\n        let newDebitData = new Array(...this.state.debitData, newDebit);\n        this.setState({ debitData: newDebitData });\n        this.setState({ totalDebit: this.calculateTotalAmount(newDebitData) });\n\n        event.target.reset();\n    }\n\n    handleAddCredit = (event) =>\n    {\n        // Prevent browser refresh\n        event.preventDefault();\n\n        const debitDescription = event.target.description.value;\n        const debitAmount = event.target.amount.value;\n        const date = new Date().toISOString();\n        const id = uuidv5(date, 'addcd184-a939-11ea-a852-0f0463844a38');\n\n        let newCredit =\n        {\n            id: id,\n            description: debitDescription,\n            amount: Number(debitAmount),\n            date: date\n        }\n        let newCreditData = new Array(...this.state.creditData, newCredit);\n        this.setState({ creditData: newCreditData });\n        this.setState({ totalCredit: this.calculateTotalAmount(newCreditData) });\n\n        event.target.reset();\n    }\n\n    render()\n    {\n        const HomeComponent = () => (<Home accountBalance={this.state.accountBalance} />);\n        const UserProfileComponent = () => \n        (<UserProfile userName={this.state.currentUser.userName} memberSince={this.state.currentUser.memberSince} />);\n        const LoginComponent = () => (<Login user={this.state.currentUser} mockLogin={this.mockLogin} {...this.props} />);\n\n        const DebitComponent = () => \n        (\n            <Debits \n                data={this.state.debitData} \n                accountBalance={this.state.totalCredit - this.state.totalDebit} \n                addDebitHandler={this.handleAddDebit}\n            />\n        );\n        const CreditComponent = () => \n        (\n            <Credits \n                data={this.state.creditData} \n                accountBalance={this.state.totalCredit - this.state.totalDebit} \n                addCreditHandler={this.handleAddCredit}\n            />\n        );\n\n        return (\n            <Router>\n                <div className=\"App\">\n                    <header className=\"App-header\">\n                        <Switch>\n                            <Route exact path=\"/\" component={HomeComponent} />\n                            <Route exact path=\"/userProfile\" render={UserProfileComponent} />\n                            <Route exact path=\"/login\" render={LoginComponent} />\n                            <Route exact path=\"/debits\" render={DebitComponent} />\n                            <Route exact path=\"/credits\" render={CreditComponent} />\n                        </Switch>\n                    </header>\n                </div>\n            </Router>\n        );\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}